package com.atball.der.search.nacos;



public class NacosLearning {
    /**
     *  核心功能
     *
     *      服务注册：Nacos Client 会通过发送REST请求的方式向Nacos Server 注册自己的服务，提供自身的元数据，比如ip、
     *              端口等信息。Nacos Service接收到注册请求后，就会把这这些元数据信息存储在一个双层的内存Map中。
     *      服务心跳：在服务注册后,Nacos Client会维护一个定时心跳来持续通知Nacos Service，说明服务一直处于可用状态，防止
     *              被剔除。默认5s发送一次心跳。
     *      服务同步：Nacos Service集群之间会互相同步服务实例，用来保护服务信息的一致性。leader raft
     *      服务发现：服务消费者（Nacos Client）在调用服务提供者的服务时，会发送一个REST请求给Nacos Server，获取上面注册的服务清单，
     *              并且缓存在Nacos Client本地，同时会在Nacos Client本地开启一个任务定时；拉取服务端最新的注册表信息更新到本地缓存
     *      服务健康检查：Nacos Client会开启一个定时任务用来检查注册服务实例的健康情况，对于超过15s没有收到客户端心跳的实例会将他的healthy
     *                  属性置为false（客户端服务发现时不会发现），如果某个实例超过30s没有收到心跳，直接剔除该实例（被剔除的实例
     *                  如果恢复心跳则会重新注册）
     *
     *
     *      内存注册表
     *          Service  ---> 就是微服务
     *          Map(nameSpace,Map(group::serviceName,Service))
     *
     *
     *          ******************************************************************************************************
     *          *                                        namespace                                                   *
     *          *     ********************************************************************************************   *
     *          *     *                                  group::serviceName                                     *    *
     *          *     *    *********************************************************************************    *    *
     *          *     *    *     Service                                                                   *    *    *
     *          *     *    *                             clusterName                                       *    *    *
     *          *     *    *    ************************************************************************   *    *    *
     *          *     *    *    *     Cluster                                                          *   *    *    *
     *          *     *    *    *     *************************************************************    *   *    *    *
     *          *     *    *    *     *       persistentInstances       ephemeralInstances        *    *   *    *    *
     *          *     *    *    *     *                                                           *    *   *    *    *
     *          *     *    *    *     *      ******************        ******************         *    *   *    *    *
     *          *     *    *    *     *      *    Instances   *        *    Instances   *         *    *   *    *    *
     *          *     *    *    *     *      ******************        ******************         *    *   *    *    *
     *          *     *    *    *     *                                                           *    *   *    *    *
     *          *     *    *    *     *      ******************        ******************         *    *   *    *    *
     *          *     *    *    *     *      *   Instances    *        *    Instances   *         *    *   *    *    *
     *          *     *    *    *     *      ******************        ******************         *    *   *    *    *
     *          *     *    *    *     *                                                           *    *   *    *    *
     *          *     *    *    *     *************************************************************    *   *    *    *
     *          *     *    *    *                                                                      *   *    *    *
     *          *     *    *    ************************************************************************   *    *    *
     *          *     *    *                                                                               *    *    *
     *          *     *     ********************************************************************************    *    *
     *          *     *                                                                                         *    *
     *          *     *                                                                                         *    *
     *          *    ********************************************************************************************    *
     *          *                                                                                                    *
     *          *                                                                                                    *
     *          ******************************************************************************************************
     *
     * nacos集群 nginx配置
     *
     *  upstream nacoscluster {
     *      server 192.168.65.232:8847;
     *      server 192.168.65.232:8848;
     *      server 192.168.65.232:8849;
     *  }
     *
     *  server {
     *      listen  80;
     *      server_name localhost www.nacoscluster.com;
     *
     *      locatoin / {
     *              proxy_pass http://nacoscluster;
     *      }
     *
     *  }
     *
     *
     *
     */

    // 心跳：
        // 服务续约：客户端向服务端定时发送心跳，服务端接收到心跳后更新服务的续约时间






}
