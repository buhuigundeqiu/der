package com.atball.der.search.datastructure;

public class SkipList {

    // 为什么需要跳表
    /**
     * 在实际开发中经常遇到需要在数据集中查找一个指定数据的场景，而常用的支持高效查找算法的实现方式有以下几种：
     *
     *      有序数组。插入时可以先对数据排序，查询时可以采用二分查找算法降低查找操作的复杂度。
     *      缺点是插入和删除数据时，为了保持元素的有序性，需要进行大量数据的移动操作。
     *
     *      二叉查找树。既支持高效的二分查找算法，又能快速的进行插入和删除操作的数据结构,
     *      理想的时间复杂度为 O($log^n$)，但是在某些极端情况下，二叉查找树有可能变成一个线性链表，
     *      即退化成链表结构。
     *
     *      针对大体量、海量数据集中查找指定数据有更好的解决方案，我们得评估时间、空间的成本和收益。
     *
     *      跳表同样支持对数据进行高效的查找，插入和删除数据操作时间复杂度能与平衡二叉树媲美，最重要的是跳表的实现比平衡二叉树简单几个级别。缺点就是“以空间换时间”方式存在一定数据冗余。
     *
     *      如果存储的数据是大对象，跳表冗余的只是指向数据的指针，几乎可以不计使用的内存空间。
     *
     */
}
